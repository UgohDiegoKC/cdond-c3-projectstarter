version: 2.1

orbs:
  slack: circleci/slack@4.12.0

commands:
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_nodejs:
    description: Install Node.js 18
    steps:
      - run:
          name: Install Node.js 18
          command: |
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt install -y nodejs

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}    
    steps:
      - run:
          name: Revert migrations
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure  https://kvdb.io/BULzLEHQkbvWVj6mDjr987/migration_${CIRCLE_WORKFLOW_ID:0:7} )
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - slack/notify:
          channel: C04CPS646NP
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - slack/notify:
          channel: C04CPS646NP
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          channel: C04CPS646NP
          event: fail
          template: basic_fail_1
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          channel: C04CPS646NP
          event: fail
          template: basic_fail_1
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan Frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical
      - slack/notify:
          channel: C04CPS646NP
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan Backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical
      - slack/notify:
          channel: C04CPS646NP
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install tar gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt    
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "24:dc:3a:e0:98:a6:b5:d2:76:bb:36:22:ef:54:83:1b"
      - attach_workspace:
          at: ~/

      - install_ansible
      - install_awscli

      - run:
          name: Configure Server
          command: |
            cd .circleci/ansible
            cat inventory.txt

            ansible-playbook -i inventory.txt configure-server.yml    
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout

      - install_awscli

      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/BULzLEHQkbvWVj6mDjr987/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
        - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - install_ansible
      - add_ssh_keys:
          fingerprints:
            - "24:dc:3a:e0:98:a6:b5:d2:76:bb:36:22:ef:54:83:1b"
      - attach_workspace:
          at: ~/

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations
  
  deploy-backend:
    docker:
        - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - install_ansible
      - add_ssh_keys:
          fingerprints:
            - "24:dc:3a:e0:98:a6:b5:d2:76:bb:36:22:ef:54:83:1b"
      - attach_workspace:
          at: ~/

      - run:
          name: Deploy backend
          command: |
            cd backend

            npm i
            npm run build

            cd ..

            cd .circleci/ansible
            mkdir files
            cd files
            tar -C ../../../backend -czvf artifact.tar.gz .
            cd ../

            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations 

  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout

      - install_nodejs
      - install_awscli

      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo ${BACKEND_IP}

            echo $BACKEND
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"

            echo "Sleeping for 1 minute"
            sleep 60

            if curl -s ${API_URL}/api/status | grep "ok"
            then
                exit 0
            else
                exit 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            
            echo ${URL}

            if curl -s ${URL} | grep "Welcome"
            then
                exit 1
            else
                exit 1
            fi
      # - destroy-environment
      # - revert-migrations

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #     - image: amazon/aws-cli
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - run:
  #         name: Install dependencies / Save Old Workflow ID to kvdb.io
  #         command: |
  #           export OLD_WORKFLOW_ID=$(aws cloudformation \
  #           list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
  #           --no-paginate --output text)
  #           echo "Old Workflow ID: $OLD_WORKFLOW_ID"
  #           curl https://kvdb.io/BULzLEHQkbvWVj6mDjr987/old_workflow_id -d "${OLD_WORKFLOW_ID}"
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           aws cloudformation deploy \
  #           --template-file .circleci/files/cloudfront.yml \
  #           --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --stack-name initialStack
  #     # Here's where you will add some code to rollback on failure
  #     - destroy-environment
  #     - revert-migrations

# cleanup:
#     docker:
#       - image: cimg/base:stable
#     steps:
#       - checkout
#       - install_awscli
#       - run:
#           name: Get old stack workflow id
#           command: |
#             export STACKS=($(aws cloudformation list-stacks \
#                 --query "StackSummaries[*].StackName" \
#                 --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
#             echo Stack names: "${STACKS[@]}"
#             export OldWorkflowID=$(curl --insecure https://kvdb.io/BULzLEHQkbvWVj6mDjr987/old_workflow_id)
#             export OldWorkflow ID: $OldWorkflowID
#       - run:
#           name: Remove old stacks and files
#           command: |
#             export OldWorkflowID=$(curl --insecure https://kvdb.io/BULzLEHQkbvWVj6mDjr987/old_workflow_id)
#             export OldWorkflow ID: $OldWorkflowID

#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               echo "Deleting old stack"
#               echo "s3://udapeople-${OldWorkflowID}"
#               aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive || true
#               aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}" || true
#               aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}" || true
#             else
#               echo "Stack is the latest"
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend:
          context: CircleCI_Context
      - build-backend:
          context: CircleCI_Context
      - test-frontend:
          requires: [build-frontend]
          context: CircleCI_Context
      - test-backend:
          requires: [build-backend]
          context: CircleCI_Context
      - scan-backend:
          requires: [build-backend]
          context: CircleCI_Context
      - scan-frontend:
          requires: [build-frontend]
          context: CircleCI_Context
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
#       - cloudfront-update:
#           requires: [smoke-test]
#       - cleanup:
#           requires: [cloudfront-update]